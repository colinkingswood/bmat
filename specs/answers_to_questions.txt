** Things to be added **

delete, update functionality
authentication
Put it on a proper server
Use a proper (multiuser) database
Pagination when returning lots of results
Get some clarification on edge cases - say we try to add a perfomer / song that already exists, so we update, overwrite, or ignore the request. Do we expect all fields to be filled when retrieving data?
What timezone are users in? Do we need to adjust depending on the client?


** Design Choices **
Used Django / Django Rest Framework
because I am familiar with them, and they are both solid, reliabale systems.
Also wanted to learn some more about Djano Rest Framework (I am not getting paid for this, so I decided to make it useful as a learning experience)
Going DRF was not the simplest option but does mean the code should be easy to modify / update at later stage.
Adding things like authentication and pagination will be a lot easier as they are built into the framework.
It does allow very it to be done with relatively little code - less code means less chance of bugs (yes, I know this is a a gerneralization, but as a *general* principle it has worked for me over the years. Obviously there are lenty of circumstances where it wouldn't be desirable - junior devs, getting stuff running quickly).


** Finger prints team goes crazy**
Should be fine if it uses a proper database, ten million songs isn't so much when properly indexed.
Obviously benchmarking would be the best thing to do here.
Check the queries that are being generated and make sure the appropriate indexes are added
If its really poor performace, look at sharding the data - maybe even go for a nasty nosql database




** problems with script **
rank starts at 0, I would asume it should be 1
Its not sending the channels in a very standard way - a string representation for an array, usually this would be send in a querystring as : ?channels=channel1&channels=channel2 rather than channels=[channel1, channel2]
